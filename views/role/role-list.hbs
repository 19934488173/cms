<h1>角色列表</h1>
<a href="/admin/roles/create" class="btn btn-primary mb-3">添加角色</a>

<form action="/admin/roles" method="get">
  <div class="input-group">
    <input type="text" class="form-control" placeholder="搜索用户名或邮箱" name="keyword" value="{{keyword}}" id="searchInput">
    <i class="bi bi-x-square" id="clearSearch"></i>
    <button class="btn btn-primary" type="submit">搜索</button>
</form>

<table class='table table-bordered table-striped mt-3'>
  <thead>
    <tr>
      <th>名称</th>
      <th>状态<i class="bi bi-vector-pen"></i></th>
      <th>排序<i class="bi bi-sort-numeric-down"></i></th>
      <th>操作</th>
    </tr>
    </tr>
  </thead>
  <tbody>
    {{#each roles}}
    <tr>
      <td>{{this.name}}</td>
      <td>
        <span class="status-toggle" style="cursor: pointer;" data-id="{{this.id}}" data-status="{{this.status}}">
          {{#if this.status}}
          激活
          <i class="bi bi-check-circle-fill text-success"></i>
          {{else}}
          未激活
          <i class="bi bi-x-circle-fill text-danger"></i>
          {{/if}}
        </span>
      </td>
      <td>
        <span style="cursor: pointer;" class="sort-text" data-id="{{this.id}}">{{this.sort}}</span>
        <input type="number" class="form-control sort-input d-none" style="width:80px" data-id="{{this.id}}"
          value="{{this.sort}}">
      </td>
      <td>
        <a href="/admin/roles/{{this.id}}/edit" class="btn btn-sm btn-primary">编辑</a>
        <a href="/admin/roles/{{this.id}}" class="btn btn-sm btn-primary">查看</a>
        <button class="btn btn-sm btn-danger" onclick="deleteUser({{this.id}})">删除</button>
      </td>
    </tr>
    {{/each}}
  </tbody>
</table>

{{> pagination this callbackUrl='/admin/roles' }}


<style>
  form .input-group {
    position: relative;
  }

  form .input-group #clearSearch {
    position: absolute;
    right: 80px;
    top: 8px;
    cursor: pointer;
    z-index: 1;
    opacity: 0;
    transition: opacity 0.2s ease;
  }

  form .input-group #clearSearch:hover {
    opacity: 1;
  }

  form .input-group #searchInput:hover+#clearSearch {
    opacity: 1;
  }
</style>

<script>
  $(function () {
    // 事件绑定
    bindEventListeners();

    // 事件委托绑定函数
    function bindEventListeners() {
      // 排序 - 双击进入编辑模式
      $(document).on('dblclick', '.sort-text', handleSortEdit);

      // 排序 - 离开编辑模式
      $(document).on('blur', '.sort-input', handleSortUpdate);

      // 切换状态
      $(document).on('click', '.status-toggle', handleStatusToggle);

      // 清空搜索框
      $(document).on('click', '#clearSearch', handleClearSearch);
    }

    // 排序编辑模式
    function handleSortEdit() {
      const $this = $(this);
      const userId = $this.data('id');
      $this.addClass('d-none');
      $(`.sort-input[data-id="${userId}"]`).removeClass('d-none').focus();
    }

    // 排序更新逻辑
    function handleSortUpdate() {
      const $this = $(this);
      const userId = $this.data('id');
      const newSort = $this.val().trim();

      if (!newSort || isNaN(newSort)) {
        alert('请输入有效的数字');
        return;
      }

      updateSort(userId, newSort)
        .then(() => {
          $this.addClass('d-none');
          $(`.sort-text[data-id="${userId}"]`).removeClass('d-none').text(newSort);
        })
        .catch((err) => alert(err.message));
    }

    // 切换状态逻辑
    function handleStatusToggle() {
      const $this = $(this);
      const userId = $this.data('id');
      const currentStatus = $this.data('status');
      const newStatus = currentStatus === 1 ? 0 : 1;

      toggleUserStatus(userId, newStatus)
        .then(() => {
          $this.data('status', newStatus);
          $this.html(
            `${newStatus ? '激活' : '未激活'}<i class="bi ${newStatus ? 'bi-check-circle-fill' : 'bi-x-circle-fill'} ${newStatus ? 'text-success' : 'text-danger'}"></i>`
          );
        })
        .catch((err) => alert(err.message));
    }

    // 删除用户逻辑
    window.deleteUser = function (id) {
      if (!confirm('确定删除该用户吗？')) return;
      deleteUserById(id)
        .then(() => location.reload())
        .catch((err) => alert(err.message));
    };

    // 清空搜索框
    function handleClearSearch() {
      $('#searchInput').val('');
      const origin = window.location.origin;
      const pathname = window.location.pathname;
      const newUrl = `${origin}${pathname}`;
      window.location.href = newUrl
    }
    // API 调用函数
    function updateSort(userId, newSort) {
      return $.ajax({
        url: `/admin/roles/${userId}`,
        type: 'PUT',
        contentType: 'application/json',
        headers: { accept: 'application/json' },
        data: JSON.stringify({ sort: newSort }),
      }).catch((error) => handleAjaxError(error));
    }

    function toggleUserStatus(userId, newStatus) {
      return $.ajax({
        url: `/admin/roles/${userId}`,
        type: 'PUT',
        contentType: 'application/json',
        headers: { accept: 'application/json' },
        data: JSON.stringify({ status: newStatus }),
      }).catch((error) => handleAjaxError(error));
    }

    function deleteUserById(userId) {
      return $.ajax({
        url: `/admin/roles/${userId}`,
        type: 'DELETE',
      }).catch((error) => handleAjaxError(error));
    }

    // 通用错误处理
    function handleAjaxError(error) {
      const responseJSON = error.responseJSON || {};
      throw new Error(responseJSON.message || '请求失败，请稍后重试');
    }
  });
</script>